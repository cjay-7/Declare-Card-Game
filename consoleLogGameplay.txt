Download the React DevTools for a better development experience: https://react.dev/link/react-devtools
DualPlayerMockSocket.ts:23 🔌 DualPlayerMockSocket initialized for: player1
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-state-update
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-drawn
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-revealed
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-ended
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: penalty-card
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-peek-result
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-preview
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: king-power-reveal
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-completed
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-state-update
DualPlayerMockSocket.ts:23 🔌 DualPlayerMockSocket initialized for: player2
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-completed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-completed
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-state-update
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-drawn
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-revealed
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-ended
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: penalty-card
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-peek-result
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-preview
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: king-power-reveal
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-completed
socket.ts:103 🎮 Player switcher UI updated
socket.ts:131 🎮 Player switcher UI added
localhost/:1 Unchecked runtime.lastError: A listener indicated an asynchronous response by returning true, but the message channel closed before a response was receivedUnderstand this error
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: false
GameBoard.tsx:137 All players: undefined
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: false
GameBoard.tsx:137 All players: undefined
GameBoard.tsx:85 [player1] Joining room QUICK as Player 1
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:210 🆕 Created new room: QUICK
DualPlayerMockSocket.ts:238 ➕ Adding new player: Player 1 (Host: true)
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(1), currentPlayerIndex: 0, deck: Array(0), discardPile: Array(0), gameStatus: 'waiting', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(1), currentPlayerIndex: 0, deck: Array(0), discardPile: Array(0), gameStatus: 'waiting', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:98 GameBoard unmounting for player1
GameBoard.tsx:85 [player1] Joining room QUICK as Player 1
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(1), currentPlayerIndex: 0, deck: Array(0), discardPile: Array(0), gameStatus: 'waiting', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(1), currentPlayerIndex: 0, deck: Array(0), discardPile: Array(0), gameStatus: 'waiting', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: [{…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: [{…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: [{…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: [{…}]
socket.ts:98 Switching to Player 2
socket.ts:33 🔄 Switched from player1 to player2
socket.ts:103 🎮 Player switcher UI updated
GameContext.tsx:181 GameContext: Switched to player2
GameBoard.tsx:54 GameBoard: Player switched to player2
GameBoard.tsx:61 Rejoining as Player 2 (without leaving)
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:238 ➕ Adding new player: Player 2 (Host: false)
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(0), discardPile: Array(0), gameStatus: 'waiting', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(0), discardPile: Array(0), gameStatus: 'waiting', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:98 GameBoard unmounting for player1
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-completed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-completed
GameBoard.tsx:85 [player2] Joining room QUICK as Player 2
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(0), discardPile: Array(0), gameStatus: 'waiting', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: game-state-update
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: card-drawn
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: card-revealed
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: game-ended
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: penalty-card
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-peek-result
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-swap-preview
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: king-power-reveal
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-swap-completed
GameBoard.tsx:98 GameBoard unmounting for player2
GameBoard.tsx:85 [player2] Joining room QUICK as Player 2
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(0), discardPile: Array(0), gameStatus: 'waiting', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(0), discardPile: Array(0), gameStatus: 'waiting', …}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
socket.ts:92 Switching to Player 1
socket.ts:33 🔄 Switched from player2 to player1
socket.ts:103 🎮 Player switcher UI updated
GameContext.tsx:181 GameContext: Switched to player1
GameBoard.tsx:54 GameBoard: Player switched to player1
GameBoard.tsx:61 Rejoining as Player 1 (without leaving)
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(0), discardPile: Array(0), gameStatus: 'waiting', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(0), discardPile: Array(0), gameStatus: 'waiting', …}
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:98 GameBoard unmounting for player2
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-completed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-completed
GameBoard.tsx:85 [player1] Joining room QUICK as Player 1
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(0), discardPile: Array(0), gameStatus: 'waiting', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-state-update
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-drawn
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-revealed
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-ended
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: penalty-card
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-peek-result
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-preview
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: king-power-reveal
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-completed
GameBoard.tsx:98 GameBoard unmounting for player1
GameBoard.tsx:85 [player1] Joining room QUICK as Player 1
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(0), discardPile: Array(0), gameStatus: 'waiting', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(0), discardPile: Array(0), gameStatus: 'waiting', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:109 [player1] Starting game in room QUICK
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: start-game {roomId: 'QUICK'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: start-game {roomId: 'QUICK'}
DualPlayerMockSocket.ts:284 🎮 [player1] Starting game in room: QUICK
DualPlayerMockSocket.ts:305 🎯 Starting game with 2 players
DualPlayerMockSocket.ts:330 🃏 Dealt 4 cards to Player 1
DualPlayerMockSocket.ts:330 🃏 Dealt 4 cards to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting start-game to all players {roomId: 'QUICK'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(44), discardPile: Array(0), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(44), discardPile: Array(0), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:338 ✅ Game started successfully in room QUICK
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
socket.ts:98 Switching to Player 2
socket.ts:33 🔄 Switched from player1 to player2
socket.ts:103 🎮 Player switcher UI updated
GameContext.tsx:181 GameContext: Switched to player2
GameBoard.tsx:54 GameBoard: Player switched to player2
GameBoard.tsx:61 Rejoining as Player 2 (without leaving)
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(44), discardPile: Array(0), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(44), discardPile: Array(0), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:98 GameBoard unmounting for player1
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-completed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-completed
GameBoard.tsx:85 [player2] Joining room QUICK as Player 2
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(44), discardPile: Array(0), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: game-state-update
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: card-drawn
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: card-revealed
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: game-ended
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: penalty-card
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-peek-result
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-swap-preview
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: king-power-reveal
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-swap-completed
GameBoard.tsx:98 GameBoard unmounting for player2
GameBoard.tsx:85 [player2] Joining room QUICK as Player 2
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(44), discardPile: Array(0), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(44), discardPile: Array(0), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
socket.ts:92 Switching to Player 1
socket.ts:33 🔄 Switched from player2 to player1
socket.ts:103 🎮 Player switcher UI updated
GameContext.tsx:181 GameContext: Switched to player1
GameBoard.tsx:54 GameBoard: Player switched to player1
GameBoard.tsx:61 Rejoining as Player 1 (without leaving)
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(44), discardPile: Array(0), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(44), discardPile: Array(0), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:98 GameBoard unmounting for player2
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-completed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-completed
GameBoard.tsx:85 [player1] Joining room QUICK as Player 1
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(44), discardPile: Array(0), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-state-update
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-drawn
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-revealed
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-ended
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: penalty-card
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-peek-result
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-preview
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: king-power-reveal
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-completed
GameBoard.tsx:98 GameBoard unmounting for player1
GameBoard.tsx:85 [player1] Joining room QUICK as Player 1
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(44), discardPile: Array(0), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(44), discardPile: Array(0), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
socket.ts:98 Switching to Player 2
socket.ts:33 🔄 Switched from player1 to player2
socket.ts:103 🎮 Player switcher UI updated
GameContext.tsx:181 GameContext: Switched to player2
GameBoard.tsx:54 GameBoard: Player switched to player2
GameBoard.tsx:61 Rejoining as Player 2 (without leaving)
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(44), discardPile: Array(0), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(44), discardPile: Array(0), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:98 GameBoard unmounting for player1
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-completed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-completed
GameBoard.tsx:85 [player2] Joining room QUICK as Player 2
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(44), discardPile: Array(0), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: game-state-update
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: card-drawn
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: card-revealed
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: game-ended
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: penalty-card
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-peek-result
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-swap-preview
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: king-power-reveal
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-swap-completed
GameBoard.tsx:98 GameBoard unmounting for player2
GameBoard.tsx:85 [player2] Joining room QUICK as Player 2
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(44), discardPile: Array(0), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(44), discardPile: Array(0), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
socket.ts:92 Switching to Player 1
socket.ts:33 🔄 Switched from player2 to player1
socket.ts:103 🎮 Player switcher UI updated
GameContext.tsx:181 GameContext: Switched to player1
GameBoard.tsx:54 GameBoard: Player switched to player1
GameBoard.tsx:61 Rejoining as Player 1 (without leaving)
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(44), discardPile: Array(0), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(44), discardPile: Array(0), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:98 GameBoard unmounting for player2
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-completed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-completed
GameBoard.tsx:85 [player1] Joining room QUICK as Player 1
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(44), discardPile: Array(0), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-state-update
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-drawn
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-revealed
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-ended
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: penalty-card
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-peek-result
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-preview
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: king-power-reveal
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-completed
GameBoard.tsx:98 GameBoard unmounting for player1
GameBoard.tsx:85 [player1] Joining room QUICK as Player 1
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(44), discardPile: Array(0), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(44), discardPile: Array(0), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:551 [player1] Drawing card...
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: draw-card {roomId: 'QUICK', playerId: 'player1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: draw-card {roomId: 'QUICK', playerId: 'player1'}
DualPlayerMockSocket.ts:370 🎴 Player 1 drew: 3 of diamonds
DualPlayerMockSocket.ts:52 📡 Broadcasting card-drawn to player1 {id: '15', suit: 'diamonds', rank: '3', value: 3, isRevealed: true}
GameContext.tsx:302 [player1] Card drawn event received: {id: '15', suit: 'diamonds', rank: '3', value: 3, isRevealed: true}
GameContext.tsx:328 Setting drawn card (legacy format): {id: '15', suit: 'diamonds', rank: '3', value: 3, isRevealed: true}
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(43), discardPile: Array(0), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(43), discardPile: Array(0), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:593 [player1] Discarding drawn card...
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: discard-drawn-card {roomId: 'QUICK', playerId: 'player1', cardId: '15'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: discard-drawn-card {roomId: 'QUICK', playerId: 'player1', cardId: '15'}
DualPlayerMockSocket.ts:403 ♻️ Player 1 discarded: 3 of diamonds
DualPlayerMockSocket.ts:64 🔄 [TURN] Current: Player 1 (index 0)
DualPlayerMockSocket.ts:86 ✅ [TURN] Next: Player 2 (index 1)
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(43), discardPile: Array(1), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(43), discardPile: Array(1), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:593 [player1] Discarding drawn card...
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: discard-drawn-card {roomId: 'QUICK', playerId: 'player1', cardId: '15'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: discard-drawn-card {roomId: 'QUICK', playerId: 'player1', cardId: '15'}
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:630 [player1] Eliminating card: 2
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: eliminate-card {roomId: 'QUICK', playerId: 'player1', cardId: '2'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: eliminate-card {roomId: 'QUICK', playerId: 'player1', cardId: '2'}
DualPlayerMockSocket.ts:579 ✅ Player 1 eliminated 3 from Player 1 at position 3
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(43), discardPile: Array(2), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(43), discardPile: Array(2), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
socket.ts:98 Switching to Player 2
socket.ts:33 🔄 Switched from player1 to player2
socket.ts:103 🎮 Player switcher UI updated
GameContext.tsx:181 GameContext: Switched to player2
GameBoard.tsx:54 GameBoard: Player switched to player2
GameBoard.tsx:61 Rejoining as Player 2 (without leaving)
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(43), discardPile: Array(2), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(43), discardPile: Array(2), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:98 GameBoard unmounting for player1
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-completed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-completed
GameBoard.tsx:85 [player2] Joining room QUICK as Player 2
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(43), discardPile: Array(2), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: game-state-update
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: card-drawn
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: card-revealed
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: game-ended
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: penalty-card
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-peek-result
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-swap-preview
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: king-power-reveal
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-swap-completed
GameBoard.tsx:98 GameBoard unmounting for player2
GameBoard.tsx:85 [player2] Joining room QUICK as Player 2
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(43), discardPile: Array(2), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(43), discardPile: Array(2), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:551 [player2] Drawing card...
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: draw-card {roomId: 'QUICK', playerId: 'player2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: draw-card {roomId: 'QUICK', playerId: 'player2'}
DualPlayerMockSocket.ts:370 🎴 Player 2 drew: Q of diamonds
DualPlayerMockSocket.ts:52 📡 Broadcasting card-drawn to player2 {id: '24', suit: 'diamonds', rank: 'Q', value: 12, isRevealed: true}
GameContext.tsx:302 [player2] Card drawn event received: {id: '24', suit: 'diamonds', rank: 'Q', value: 12, isRevealed: true}
GameContext.tsx:328 Setting drawn card (legacy format): {id: '24', suit: 'diamonds', rank: 'Q', value: 12, isRevealed: true}
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(42), discardPile: Array(2), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(42), discardPile: Array(2), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:593 [player2] Discarding drawn card...
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: discard-drawn-card {roomId: 'QUICK', playerId: 'player2', cardId: '24'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: discard-drawn-card {roomId: 'QUICK', playerId: 'player2', cardId: '24'}
DualPlayerMockSocket.ts:403 ♻️ Player 2 discarded: Q of diamonds
DualPlayerMockSocket.ts:426 ⚡ Q power activated for Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(42), discardPile: Array(3), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(42), discardPile: Array(3), gameStatus: 'playing', …}
GameContext.tsx:593 [player2] Discarding drawn card...
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: discard-drawn-card {roomId: 'QUICK', playerId: 'player2', cardId: '24'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: discard-drawn-card {roomId: 'QUICK', playerId: 'player2', cardId: '24'}
DualPlayerMockSocket.ts:398 ❌ No drawn card found for player2
handleDiscardDrawnCard @ DualPlayerMockSocket.ts:398
handleClientEvents @ DualPlayerMockSocket.ts:162
emit @ DualPlayerMockSocket.ts:121
emit @ socket.ts:13
handleDiscardDrawnCard @ GameContext.tsx:598
executeDispatch @ react-dom_client.js?v=27039566:11736
runWithFiberInDEV @ react-dom_client.js?v=27039566:1485
processDispatchQueue @ react-dom_client.js?v=27039566:11772
(anonymous) @ react-dom_client.js?v=27039566:12182
batchedUpdates$1 @ react-dom_client.js?v=27039566:2628
dispatchEventForPluginEventSystem @ react-dom_client.js?v=27039566:11877
dispatchEvent @ react-dom_client.js?v=27039566:14792
dispatchDiscreteEvent @ react-dom_client.js?v=27039566:14773
<div>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=27039566:250
GameBoard @ GameBoard.tsx:430
react-stack-bottom-frame @ react-dom_client.js?v=27039566:17424
renderWithHooksAgain @ react-dom_client.js?v=27039566:4281
renderWithHooks @ react-dom_client.js?v=27039566:4217
updateFunctionComponent @ react-dom_client.js?v=27039566:6619
beginWork @ react-dom_client.js?v=27039566:7654
runWithFiberInDEV @ react-dom_client.js?v=27039566:1485
performUnitOfWork @ react-dom_client.js?v=27039566:10868
workLoopSync @ react-dom_client.js?v=27039566:10728
renderRootSync @ react-dom_client.js?v=27039566:10711
performWorkOnRoot @ react-dom_client.js?v=27039566:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=27039566:11623
performWorkUntilDeadline @ react-dom_client.js?v=27039566:36
<GameBoard>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=27039566:250
App @ App.tsx:121
react-stack-bottom-frame @ react-dom_client.js?v=27039566:17424
renderWithHooksAgain @ react-dom_client.js?v=27039566:4281
renderWithHooks @ react-dom_client.js?v=27039566:4217
updateFunctionComponent @ react-dom_client.js?v=27039566:6619
beginWork @ react-dom_client.js?v=27039566:7654
runWithFiberInDEV @ react-dom_client.js?v=27039566:1485
performUnitOfWork @ react-dom_client.js?v=27039566:10868
workLoopSync @ react-dom_client.js?v=27039566:10728
renderRootSync @ react-dom_client.js?v=27039566:10711
performWorkOnRoot @ react-dom_client.js?v=27039566:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=27039566:11623
performWorkUntilDeadline @ react-dom_client.js?v=27039566:36Understand this error
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:763 [player2] Selected card 1/2 for Q power
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:763 [player2] Selected card 2/2 for Q power
GameContext.tsx:769 [player2] Executing Q power swap
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: use-power-swap {roomId: 'QUICK', playerId: 'player2', card1PlayerId: 'player2', card1Index: 1, card2PlayerId: 'player1', …}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: use-power-swap {roomId: 'QUICK', playerId: 'player2', card1PlayerId: 'player2', card1Index: 1, card2PlayerId: 'player1', …}
DualPlayerMockSocket.ts:814 🔄 Q Power: Unseen swap
DualPlayerMockSocket.ts:861 🔄 Player 2 used Q power: swapped 7 (Player 2) ↔ 2 (Player 1)
DualPlayerMockSocket.ts:64 🔄 [TURN] Current: Player 2 (index 1)
DualPlayerMockSocket.ts:86 ✅ [TURN] Next: Player 1 (index 0)
DualPlayerMockSocket.ts:39 📡 Broadcasting power-swap-completed to all players {powerUserId: 'player2', powerUserName: 'Player 2', power: 'Q', swapDetails: {…}}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:481 [player2] Power swap completed: {powerUserId: 'player2', powerUserName: 'Player 2', power: 'Q', swapDetails: {…}}
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(42), discardPile: Array(3), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(42), discardPile: Array(3), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:630 [player2] Eliminating card: 11
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: eliminate-card {roomId: 'QUICK', playerId: 'player2', cardId: '11'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: eliminate-card {roomId: 'QUICK', playerId: 'player2', cardId: '11'}
DualPlayerMockSocket.ts:579 ✅ Player 2 eliminated Q from Player 2 at position 2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(42), discardPile: Array(4), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(42), discardPile: Array(4), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
socket.ts:92 Switching to Player 1
socket.ts:33 🔄 Switched from player2 to player1
socket.ts:103 🎮 Player switcher UI updated
GameContext.tsx:181 GameContext: Switched to player1
GameBoard.tsx:54 GameBoard: Player switched to player1
GameBoard.tsx:61 Rejoining as Player 1 (without leaving)
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(42), discardPile: Array(4), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(42), discardPile: Array(4), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:98 GameBoard unmounting for player2
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-completed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-completed
GameBoard.tsx:85 [player1] Joining room QUICK as Player 1
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(42), discardPile: Array(4), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-state-update
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-drawn
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-revealed
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-ended
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: penalty-card
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-peek-result
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-preview
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: king-power-reveal
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-completed
GameBoard.tsx:98 GameBoard unmounting for player1
GameBoard.tsx:85 [player1] Joining room QUICK as Player 1
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(42), discardPile: Array(4), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(42), discardPile: Array(4), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:551 [player1] Drawing card...
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: draw-card {roomId: 'QUICK', playerId: 'player1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: draw-card {roomId: 'QUICK', playerId: 'player1'}
DualPlayerMockSocket.ts:370 🎴 Player 1 drew: 2 of hearts
DualPlayerMockSocket.ts:52 📡 Broadcasting card-drawn to player1 {id: '1', suit: 'hearts', rank: '2', value: 2, isRevealed: true}
GameContext.tsx:302 [player1] Card drawn event received: {id: '1', suit: 'hearts', rank: '2', value: 2, isRevealed: true}
GameContext.tsx:328 Setting drawn card (legacy format): {id: '1', suit: 'hearts', rank: '2', value: 2, isRevealed: true}
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(41), discardPile: Array(4), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(41), discardPile: Array(4), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:593 [player1] Discarding drawn card...
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: discard-drawn-card {roomId: 'QUICK', playerId: 'player1', cardId: '1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: discard-drawn-card {roomId: 'QUICK', playerId: 'player1', cardId: '1'}
DualPlayerMockSocket.ts:403 ♻️ Player 1 discarded: 2 of hearts
DualPlayerMockSocket.ts:64 🔄 [TURN] Current: Player 1 (index 0)
DualPlayerMockSocket.ts:86 ✅ [TURN] Next: Player 2 (index 1)
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(41), discardPile: Array(5), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(41), discardPile: Array(5), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:593 [player1] Discarding drawn card...
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: discard-drawn-card {roomId: 'QUICK', playerId: 'player1', cardId: '1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: discard-drawn-card {roomId: 'QUICK', playerId: 'player1', cardId: '1'}
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:630 [player1] Eliminating card: 32
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: eliminate-card {roomId: 'QUICK', playerId: 'player1', cardId: '32'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: eliminate-card {roomId: 'QUICK', playerId: 'player1', cardId: '32'}
DualPlayerMockSocket.ts:584 ❌ Player 1 failed to eliminate - penalty
DualPlayerMockSocket.ts:39 📡 Broadcasting penalty-card to all players {playerId: 'player1', penaltyCard: {…}, reason: 'Invalid elimination attempt'}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:368 [player1] Received penalty card: {id: '42', suit: 'spades', rank: '4', value: 4, isRevealed: false, …}
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(40), discardPile: Array(5), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(40), discardPile: Array(5), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:698 [player1] Selecting card: {id: '32', suit: 'clubs', rank: '7', value: 7, isRevealed: false, …}
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
socket.ts:98 Switching to Player 2
socket.ts:33 🔄 Switched from player1 to player2
socket.ts:103 🎮 Player switcher UI updated
GameContext.tsx:181 GameContext: Switched to player2
GameBoard.tsx:54 GameBoard: Player switched to player2
GameBoard.tsx:61 Rejoining as Player 2 (without leaving)
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(40), discardPile: Array(5), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(40), discardPile: Array(5), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:98 GameBoard unmounting for player1
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-completed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-completed
GameBoard.tsx:85 [player2] Joining room QUICK as Player 2
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(40), discardPile: Array(5), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: game-state-update
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: card-drawn
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: card-revealed
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: game-ended
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: penalty-card
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-peek-result
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-swap-preview
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: king-power-reveal
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-swap-completed
GameBoard.tsx:98 GameBoard unmounting for player2
GameBoard.tsx:85 [player2] Joining room QUICK as Player 2
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(40), discardPile: Array(5), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(40), discardPile: Array(5), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:698 [player2] Selecting card: {id: '14', suit: 'diamonds', rank: '2', value: 2, isRevealed: false, …}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:630 [player2] Eliminating card: 14
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: eliminate-card {roomId: 'QUICK', playerId: 'player2', cardId: '14'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: eliminate-card {roomId: 'QUICK', playerId: 'player2', cardId: '14'}
DualPlayerMockSocket.ts:579 ✅ Player 2 eliminated 2 from Player 2 at position 1
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(40), discardPile: Array(6), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(40), discardPile: Array(6), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:551 [player2] Drawing card...
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: draw-card {roomId: 'QUICK', playerId: 'player2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: draw-card {roomId: 'QUICK', playerId: 'player2'}
DualPlayerMockSocket.ts:370 🎴 Player 2 drew: K of clubs
DualPlayerMockSocket.ts:52 📡 Broadcasting card-drawn to player2 {id: '38', suit: 'clubs', rank: 'K', value: 13, isRevealed: true}
GameContext.tsx:302 [player2] Card drawn event received: {id: '38', suit: 'clubs', rank: 'K', value: 13, isRevealed: true}
GameContext.tsx:328 Setting drawn card (legacy format): {id: '38', suit: 'clubs', rank: 'K', value: 13, isRevealed: true}
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(39), discardPile: Array(6), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(39), discardPile: Array(6), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:593 [player2] Discarding drawn card...
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: discard-drawn-card {roomId: 'QUICK', playerId: 'player2', cardId: '38'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: discard-drawn-card {roomId: 'QUICK', playerId: 'player2', cardId: '38'}
DualPlayerMockSocket.ts:403 ♻️ Player 2 discarded: K of clubs
DualPlayerMockSocket.ts:426 ⚡ K power activated for Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(39), discardPile: Array(7), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(39), discardPile: Array(7), gameStatus: 'playing', …}
GameContext.tsx:593 [player2] Discarding drawn card...
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: discard-drawn-card {roomId: 'QUICK', playerId: 'player2', cardId: '38'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: discard-drawn-card {roomId: 'QUICK', playerId: 'player2', cardId: '38'}
DualPlayerMockSocket.ts:398 ❌ No drawn card found for player2
handleDiscardDrawnCard @ DualPlayerMockSocket.ts:398
handleClientEvents @ DualPlayerMockSocket.ts:162
emit @ DualPlayerMockSocket.ts:121
emit @ socket.ts:13
handleDiscardDrawnCard @ GameContext.tsx:598
executeDispatch @ react-dom_client.js?v=27039566:11736
runWithFiberInDEV @ react-dom_client.js?v=27039566:1485
processDispatchQueue @ react-dom_client.js?v=27039566:11772
(anonymous) @ react-dom_client.js?v=27039566:12182
batchedUpdates$1 @ react-dom_client.js?v=27039566:2628
dispatchEventForPluginEventSystem @ react-dom_client.js?v=27039566:11877
dispatchEvent @ react-dom_client.js?v=27039566:14792
dispatchDiscreteEvent @ react-dom_client.js?v=27039566:14773
<div>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=27039566:250
GameBoard @ GameBoard.tsx:430
react-stack-bottom-frame @ react-dom_client.js?v=27039566:17424
renderWithHooksAgain @ react-dom_client.js?v=27039566:4281
renderWithHooks @ react-dom_client.js?v=27039566:4217
updateFunctionComponent @ react-dom_client.js?v=27039566:6619
beginWork @ react-dom_client.js?v=27039566:7654
runWithFiberInDEV @ react-dom_client.js?v=27039566:1485
performUnitOfWork @ react-dom_client.js?v=27039566:10868
workLoopSync @ react-dom_client.js?v=27039566:10728
renderRootSync @ react-dom_client.js?v=27039566:10711
performWorkOnRoot @ react-dom_client.js?v=27039566:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=27039566:11623
performWorkUntilDeadline @ react-dom_client.js?v=27039566:36
<GameBoard>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=27039566:250
App @ App.tsx:121
react-stack-bottom-frame @ react-dom_client.js?v=27039566:17424
renderWithHooksAgain @ react-dom_client.js?v=27039566:4281
renderWithHooks @ react-dom_client.js?v=27039566:4217
updateFunctionComponent @ react-dom_client.js?v=27039566:6619
beginWork @ react-dom_client.js?v=27039566:7654
runWithFiberInDEV @ react-dom_client.js?v=27039566:1485
performUnitOfWork @ react-dom_client.js?v=27039566:10868
workLoopSync @ react-dom_client.js?v=27039566:10728
renderRootSync @ react-dom_client.js?v=27039566:10711
performWorkOnRoot @ react-dom_client.js?v=27039566:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=27039566:11623
performWorkUntilDeadline @ react-dom_client.js?v=27039566:36Understand this error
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:763 [player2] Selected card 1/2 for K power
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:763 [player2] Selected card 2/2 for K power
GameContext.tsx:769 [player2] Executing K power swap
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: use-power-swap {roomId: 'QUICK', playerId: 'player2', card1PlayerId: 'player2', card1Index: 0, card2PlayerId: 'player1', …}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: use-power-swap {roomId: 'QUICK', playerId: 'player2', card1PlayerId: 'player2', card1Index: 0, card2PlayerId: 'player1', …}
DualPlayerMockSocket.ts:774 👁️ K Power: Revealing both cards before swap
DualPlayerMockSocket.ts:39 📡 Broadcasting king-power-reveal to all players {powerUserId: 'player2', powerUserName: 'Player 2', card1: {…}, card2: {…}, message: 'Player 2 used King power - revealing cards before swap'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:427 [player2] King power reveal: {powerUserId: 'player2', powerUserName: 'Player 2', card1: {…}, card2: {…}, message: 'Player 2 used King power - revealing cards before swap'}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
DualPlayerMockSocket.ts:861 🔄 Player 2 used K power: swapped A (Player 2) ↔ 4 (Player 1)
DualPlayerMockSocket.ts:64 🔄 [TURN] Current: Player 2 (index 1)
DualPlayerMockSocket.ts:86 ✅ [TURN] Next: Player 1 (index 0)
DualPlayerMockSocket.ts:39 📡 Broadcasting power-swap-completed to all players {powerUserId: 'player2', powerUserName: 'Player 2', power: 'K', swapDetails: {…}}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:481 [player2] Power swap completed: {powerUserId: 'player2', powerUserName: 'Player 2', power: 'K', swapDetails: {…}}power: "K"powerUserId: "player2"powerUserName: "Player 2"swapDetails: card1Rank: "A"card2Rank: "4"player1Name: "Player 2"player2Name: "Player 1"[[Prototype]]: Object[[Prototype]]: Object
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(39), discardPile: Array(7), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(39), discardPile: Array(7), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]0: id: "player1"isHost: truename: "Player 1"[[Prototype]]: Object1: id: "player2"isHost: falsename: "Player 2"[[Prototype]]: Objectlength: 2[[Prototype]]: Array(0)
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
socket.ts:92 Switching to Player 1
socket.ts:33 🔄 Switched from player2 to player1
socket.ts:103 🎮 Player switcher UI updated
GameContext.tsx:181 GameContext: Switched to player1
GameBoard.tsx:54 GameBoard: Player switched to player1
GameBoard.tsx:61 Rejoining as Player 1 (without leaving)
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(39), discardPile: Array(7), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(39), discardPile: Array(7), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:98 GameBoard unmounting for player2
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-completed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-completed
GameBoard.tsx:85 [player1] Joining room QUICK as Player 1
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(39), discardPile: Array(7), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-state-update
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-drawn
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-revealed
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-ended
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: penalty-card
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-peek-result
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-preview
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: king-power-reveal
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-completed
GameBoard.tsx:98 GameBoard unmounting for player1
GameBoard.tsx:85 [player1] Joining room QUICK as Player 1
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(39), discardPile: Array(7), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(39), discardPile: Array(7), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:551 [player1] Drawing card...
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: draw-card {roomId: 'QUICK', playerId: 'player1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: draw-card {roomId: 'QUICK', playerId: 'player1'}
DualPlayerMockSocket.ts:370 🎴 Player 1 drew: J of spades
DualPlayerMockSocket.ts:52 📡 Broadcasting card-drawn to player1 {id: '49', suit: 'spades', rank: 'J', value: 11, isRevealed: true}
GameContext.tsx:302 [player1] Card drawn event received: {id: '49', suit: 'spades', rank: 'J', value: 11, isRevealed: true}
GameContext.tsx:328 Setting drawn card (legacy format): {id: '49', suit: 'spades', rank: 'J', value: 11, isRevealed: true}
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(38), discardPile: Array(7), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(38), discardPile: Array(7), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:593 [player1] Discarding drawn card...
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: discard-drawn-card {roomId: 'QUICK', playerId: 'player1', cardId: '49'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: discard-drawn-card {roomId: 'QUICK', playerId: 'player1', cardId: '49'}
DualPlayerMockSocket.ts:403 ♻️ Player 1 discarded: J of spades
DualPlayerMockSocket.ts:417 ⚡ Jack power: Skipping Player 2
DualPlayerMockSocket.ts:64 🔄 [TURN] Current: Player 1 (index 0)
DualPlayerMockSocket.ts:76 ⏭️ [TURN] Player 2 turn skipped
DualPlayerMockSocket.ts:86 ✅ [TURN] Next: Player 1 (index 0)
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(38), discardPile: Array(8), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(38), discardPile: Array(8), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:593 [player1] Discarding drawn card...
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: discard-drawn-card {roomId: 'QUICK', playerId: 'player1', cardId: '49'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: discard-drawn-card {roomId: 'QUICK', playerId: 'player1', cardId: '49'}
DualPlayerMockSocket.ts:398 ❌ No drawn card found for player1
handleDiscardDrawnCard @ DualPlayerMockSocket.ts:398
handleClientEvents @ DualPlayerMockSocket.ts:162
emit @ DualPlayerMockSocket.ts:121
emit @ socket.ts:13
handleDiscardDrawnCard @ GameContext.tsx:598
executeDispatch @ react-dom_client.js?v=27039566:11736
runWithFiberInDEV @ react-dom_client.js?v=27039566:1485
processDispatchQueue @ react-dom_client.js?v=27039566:11772
(anonymous) @ react-dom_client.js?v=27039566:12182
batchedUpdates$1 @ react-dom_client.js?v=27039566:2628
dispatchEventForPluginEventSystem @ react-dom_client.js?v=27039566:11877
dispatchEvent @ react-dom_client.js?v=27039566:14792
dispatchDiscreteEvent @ react-dom_client.js?v=27039566:14773
<div>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=27039566:250
GameBoard @ GameBoard.tsx:430
react-stack-bottom-frame @ react-dom_client.js?v=27039566:17424
renderWithHooksAgain @ react-dom_client.js?v=27039566:4281
renderWithHooks @ react-dom_client.js?v=27039566:4217
updateFunctionComponent @ react-dom_client.js?v=27039566:6619
beginWork @ react-dom_client.js?v=27039566:7654
runWithFiberInDEV @ react-dom_client.js?v=27039566:1485
performUnitOfWork @ react-dom_client.js?v=27039566:10868
workLoopSync @ react-dom_client.js?v=27039566:10728
renderRootSync @ react-dom_client.js?v=27039566:10711
performWorkOnRoot @ react-dom_client.js?v=27039566:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=27039566:11623
performWorkUntilDeadline @ react-dom_client.js?v=27039566:36
<GameBoard>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=27039566:250
App @ App.tsx:121
react-stack-bottom-frame @ react-dom_client.js?v=27039566:17424
renderWithHooksAgain @ react-dom_client.js?v=27039566:4281
renderWithHooks @ react-dom_client.js?v=27039566:4217
updateFunctionComponent @ react-dom_client.js?v=27039566:6619
beginWork @ react-dom_client.js?v=27039566:7654
runWithFiberInDEV @ react-dom_client.js?v=27039566:1485
performUnitOfWork @ react-dom_client.js?v=27039566:10868
workLoopSync @ react-dom_client.js?v=27039566:10728
renderRootSync @ react-dom_client.js?v=27039566:10711
performWorkOnRoot @ react-dom_client.js?v=27039566:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=27039566:11623
performWorkUntilDeadline @ react-dom_client.js?v=27039566:36Understand this error
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:551 [player1] Drawing card...
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: draw-card {roomId: 'QUICK', playerId: 'player1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: draw-card {roomId: 'QUICK', playerId: 'player1'}
DualPlayerMockSocket.ts:370 🎴 Player 1 drew: 3 of clubs
DualPlayerMockSocket.ts:52 📡 Broadcasting card-drawn to player1 {id: '28', suit: 'clubs', rank: '3', value: 3, isRevealed: true}
GameContext.tsx:302 [player1] Card drawn event received: {id: '28', suit: 'clubs', rank: '3', value: 3, isRevealed: true}
GameContext.tsx:328 Setting drawn card (legacy format): {id: '28', suit: 'clubs', rank: '3', value: 3, isRevealed: true}
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(37), discardPile: Array(8), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(37), discardPile: Array(8), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:685 [player1] Swapping drawn card with selected card: {id: '5', suit: 'hearts', rank: '6', value: 6, isRevealed: false, …}
GameContext.tsx:563 [player1] Swapping drawn card with hand card: 5
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: swap-drawn-card {roomId: 'QUICK', playerId: 'player1', drawnCardId: '28', handCardId: '5'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: swap-drawn-card {roomId: 'QUICK', playerId: 'player1', drawnCardId: '28', handCardId: '5'}
DualPlayerMockSocket.ts:493 🔄 Player 1 swapped: 3 → hand, 6 → discard
DualPlayerMockSocket.ts:64 🔄 [TURN] Current: Player 1 (index 0)
DualPlayerMockSocket.ts:86 ✅ [TURN] Next: Player 2 (index 1)
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(37), discardPile: Array(9), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(37), discardPile: Array(9), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
socket.ts:98 Switching to Player 2
socket.ts:33 🔄 Switched from player1 to player2
socket.ts:103 🎮 Player switcher UI updated
GameContext.tsx:181 GameContext: Switched to player2
GameBoard.tsx:54 GameBoard: Player switched to player2
GameBoard.tsx:61 Rejoining as Player 2 (without leaving)
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(37), discardPile: Array(9), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(37), discardPile: Array(9), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:98 GameBoard unmounting for player1
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-completed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-completed
GameBoard.tsx:85 [player2] Joining room QUICK as Player 2
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(37), discardPile: Array(9), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: game-state-update
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: card-drawn
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: card-revealed
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: game-ended
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: penalty-card
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-peek-result
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-swap-preview
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: king-power-reveal
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-swap-completed
GameBoard.tsx:98 GameBoard unmounting for player2
GameBoard.tsx:85 [player2] Joining room QUICK as Player 2
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(37), discardPile: Array(9), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(37), discardPile: Array(9), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:551 [player2] Drawing card...
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: draw-card {roomId: 'QUICK', playerId: 'player2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: draw-card {roomId: 'QUICK', playerId: 'player2'}
DualPlayerMockSocket.ts:370 🎴 Player 2 drew: Q of clubs
DualPlayerMockSocket.ts:52 📡 Broadcasting card-drawn to player2 {id: '37', suit: 'clubs', rank: 'Q', value: 12, isRevealed: true}
GameContext.tsx:302 [player2] Card drawn event received: {id: '37', suit: 'clubs', rank: 'Q', value: 12, isRevealed: true}
GameContext.tsx:328 Setting drawn card (legacy format): {id: '37', suit: 'clubs', rank: 'Q', value: 12, isRevealed: true}
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(36), discardPile: Array(9), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(36), discardPile: Array(9), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:593 [player2] Discarding drawn card...
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: discard-drawn-card {roomId: 'QUICK', playerId: 'player2', cardId: '37'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: discard-drawn-card {roomId: 'QUICK', playerId: 'player2', cardId: '37'}
DualPlayerMockSocket.ts:403 ♻️ Player 2 discarded: Q of clubs
DualPlayerMockSocket.ts:426 ⚡ Q power activated for Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(36), discardPile: Array(10), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(36), discardPile: Array(10), gameStatus: 'playing', …}
GameContext.tsx:593 [player2] Discarding drawn card...
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: discard-drawn-card {roomId: 'QUICK', playerId: 'player2', cardId: '37'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: discard-drawn-card {roomId: 'QUICK', playerId: 'player2', cardId: '37'}
DualPlayerMockSocket.ts:398 ❌ No drawn card found for player2
handleDiscardDrawnCard @ DualPlayerMockSocket.ts:398
handleClientEvents @ DualPlayerMockSocket.ts:162
emit @ DualPlayerMockSocket.ts:121
emit @ socket.ts:13
handleDiscardDrawnCard @ GameContext.tsx:598
executeDispatch @ react-dom_client.js?v=27039566:11736
runWithFiberInDEV @ react-dom_client.js?v=27039566:1485
processDispatchQueue @ react-dom_client.js?v=27039566:11772
(anonymous) @ react-dom_client.js?v=27039566:12182
batchedUpdates$1 @ react-dom_client.js?v=27039566:2628
dispatchEventForPluginEventSystem @ react-dom_client.js?v=27039566:11877
dispatchEvent @ react-dom_client.js?v=27039566:14792
dispatchDiscreteEvent @ react-dom_client.js?v=27039566:14773
<div>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=27039566:250
GameBoard @ GameBoard.tsx:430
react-stack-bottom-frame @ react-dom_client.js?v=27039566:17424
renderWithHooksAgain @ react-dom_client.js?v=27039566:4281
renderWithHooks @ react-dom_client.js?v=27039566:4217
updateFunctionComponent @ react-dom_client.js?v=27039566:6619
beginWork @ react-dom_client.js?v=27039566:7654
runWithFiberInDEV @ react-dom_client.js?v=27039566:1485
performUnitOfWork @ react-dom_client.js?v=27039566:10868
workLoopSync @ react-dom_client.js?v=27039566:10728
renderRootSync @ react-dom_client.js?v=27039566:10711
performWorkOnRoot @ react-dom_client.js?v=27039566:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=27039566:11623
performWorkUntilDeadline @ react-dom_client.js?v=27039566:36
<GameBoard>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=27039566:250
App @ App.tsx:121
react-stack-bottom-frame @ react-dom_client.js?v=27039566:17424
renderWithHooksAgain @ react-dom_client.js?v=27039566:4281
renderWithHooks @ react-dom_client.js?v=27039566:4217
updateFunctionComponent @ react-dom_client.js?v=27039566:6619
beginWork @ react-dom_client.js?v=27039566:7654
runWithFiberInDEV @ react-dom_client.js?v=27039566:1485
performUnitOfWork @ react-dom_client.js?v=27039566:10868
workLoopSync @ react-dom_client.js?v=27039566:10728
renderRootSync @ react-dom_client.js?v=27039566:10711
performWorkOnRoot @ react-dom_client.js?v=27039566:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=27039566:11623
performWorkUntilDeadline @ react-dom_client.js?v=27039566:36Understand this error
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:763 [player2] Selected card 1/2 for Q power
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:763 [player2] Selected card 2/2 for Q power
GameContext.tsx:769 [player2] Executing Q power swap
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: use-power-swap {roomId: 'QUICK', playerId: 'player2', card1PlayerId: 'player2', card1Index: 3, card2PlayerId: 'player1', …}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: use-power-swap {roomId: 'QUICK', playerId: 'player2', card1PlayerId: 'player2', card1Index: 3, card2PlayerId: 'player1', …}
DualPlayerMockSocket.ts:814 🔄 Q Power: Unseen swap
DualPlayerMockSocket.ts:861 🔄 Player 2 used Q power: swapped 10 (Player 2) ↔ A (Player 1)
DualPlayerMockSocket.ts:64 🔄 [TURN] Current: Player 2 (index 1)
DualPlayerMockSocket.ts:86 ✅ [TURN] Next: Player 1 (index 0)
DualPlayerMockSocket.ts:39 📡 Broadcasting power-swap-completed to all players {powerUserId: 'player2', powerUserName: 'Player 2', power: 'Q', swapDetails: {…}}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:481 [player2] Power swap completed: {powerUserId: 'player2', powerUserName: 'Player 2', power: 'Q', swapDetails: {…}}
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(36), discardPile: Array(10), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(36), discardPile: Array(10), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
socket.ts:92 Switching to Player 1
socket.ts:33 🔄 Switched from player2 to player1
socket.ts:103 🎮 Player switcher UI updated
GameContext.tsx:181 GameContext: Switched to player1
GameBoard.tsx:54 GameBoard: Player switched to player1
GameBoard.tsx:61 Rejoining as Player 1 (without leaving)
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(36), discardPile: Array(10), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(36), discardPile: Array(10), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:98 GameBoard unmounting for player2
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-completed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-completed
GameBoard.tsx:85 [player1] Joining room QUICK as Player 1
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(36), discardPile: Array(10), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-state-update
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-drawn
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-revealed
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-ended
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: penalty-card
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-peek-result
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-preview
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: king-power-reveal
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-completed
GameBoard.tsx:98 GameBoard unmounting for player1
GameBoard.tsx:85 [player1] Joining room QUICK as Player 1
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(36), discardPile: Array(10), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(36), discardPile: Array(10), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:551 [player1] Drawing card...
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: draw-card {roomId: 'QUICK', playerId: 'player1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: draw-card {roomId: 'QUICK', playerId: 'player1'}
DualPlayerMockSocket.ts:370 🎴 Player 1 drew: 2 of spades
DualPlayerMockSocket.ts:52 📡 Broadcasting card-drawn to player1 {id: '40', suit: 'spades', rank: '2', value: 2, isRevealed: true}
GameContext.tsx:302 [player1] Card drawn event received: {id: '40', suit: 'spades', rank: '2', value: 2, isRevealed: true}
GameContext.tsx:328 Setting drawn card (legacy format): {id: '40', suit: 'spades', rank: '2', value: 2, isRevealed: true}
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(35), discardPile: Array(10), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(35), discardPile: Array(10), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:685 [player1] Swapping drawn card with selected card: {id: '45', suit: 'spades', rank: '7', value: 7, isRevealed: false, …}
GameContext.tsx:563 [player1] Swapping drawn card with hand card: 45
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: swap-drawn-card {roomId: 'QUICK', playerId: 'player1', drawnCardId: '40', handCardId: '45'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: swap-drawn-card {roomId: 'QUICK', playerId: 'player1', drawnCardId: '40', handCardId: '45'}
DualPlayerMockSocket.ts:493 🔄 Player 1 swapped: 2 → hand, 7 → discard
DualPlayerMockSocket.ts:64 🔄 [TURN] Current: Player 1 (index 0)
DualPlayerMockSocket.ts:86 ✅ [TURN] Next: Player 2 (index 1)
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(35), discardPile: Array(11), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(35), discardPile: Array(11), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
socket.ts:98 Switching to Player 2
socket.ts:33 🔄 Switched from player1 to player2
socket.ts:103 🎮 Player switcher UI updated
GameContext.tsx:181 GameContext: Switched to player2
GameBoard.tsx:54 GameBoard: Player switched to player2
GameBoard.tsx:61 Rejoining as Player 2 (without leaving)
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(35), discardPile: Array(11), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(35), discardPile: Array(11), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:98 GameBoard unmounting for player1
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-completed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-completed
GameBoard.tsx:85 [player2] Joining room QUICK as Player 2
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(35), discardPile: Array(11), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: game-state-update
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: card-drawn
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: card-revealed
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: game-ended
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: penalty-card
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-peek-result
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-swap-preview
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: king-power-reveal
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-swap-completed
GameBoard.tsx:98 GameBoard unmounting for player2
GameBoard.tsx:85 [player2] Joining room QUICK as Player 2
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(35), discardPile: Array(11), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(35), discardPile: Array(11), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:551 [player2] Drawing card...
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: draw-card {roomId: 'QUICK', playerId: 'player2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: draw-card {roomId: 'QUICK', playerId: 'player2'}
DualPlayerMockSocket.ts:370 🎴 Player 2 drew: 10 of diamonds
DualPlayerMockSocket.ts:52 📡 Broadcasting card-drawn to player2 {id: '22', suit: 'diamonds', rank: '10', value: 10, isRevealed: true}
GameContext.tsx:302 [player2] Card drawn event received: {id: '22', suit: 'diamonds', rank: '10', value: 10, isRevealed: true}
GameContext.tsx:328 Setting drawn card (legacy format): {id: '22', suit: 'diamonds', rank: '10', value: 10, isRevealed: true}
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(11), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(11), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:593 [player2] Discarding drawn card...
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: discard-drawn-card {roomId: 'QUICK', playerId: 'player2', cardId: '22'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: discard-drawn-card {roomId: 'QUICK', playerId: 'player2', cardId: '22'}
DualPlayerMockSocket.ts:403 ♻️ Player 2 discarded: 10 of diamonds
DualPlayerMockSocket.ts:426 ⚡ 10 power activated for Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(12), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(12), gameStatus: 'playing', …}
GameContext.tsx:593 [player2] Discarding drawn card...
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: discard-drawn-card {roomId: 'QUICK', playerId: 'player2', cardId: '22'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: discard-drawn-card {roomId: 'QUICK', playerId: 'player2', cardId: '22'}cardId: "22"playerId: "player2"roomId: "QUICK"[[Prototype]]: Objectconstructor: ƒ Object()hasOwnProperty: ƒ hasOwnProperty()isPrototypeOf: ƒ isPrototypeOf()propertyIsEnumerable: ƒ propertyIsEnumerable()toLocaleString: ƒ toLocaleString()toString: ƒ toString()valueOf: ƒ valueOf()__defineGetter__: ƒ __defineGetter__()__defineSetter__: ƒ __defineSetter__()__lookupGetter__: ƒ __lookupGetter__()__lookupSetter__: ƒ __lookupSetter__()__proto__: (...)get __proto__: ƒ __proto__()set __proto__: ƒ __proto__()
DualPlayerMockSocket.ts:398 ❌ No drawn card found for player2
handleDiscardDrawnCard @ DualPlayerMockSocket.ts:398
handleClientEvents @ DualPlayerMockSocket.ts:162
emit @ DualPlayerMockSocket.ts:121
emit @ socket.ts:13
handleDiscardDrawnCard @ GameContext.tsx:598
executeDispatch @ react-dom_client.js?v=27039566:11736
runWithFiberInDEV @ react-dom_client.js?v=27039566:1485
processDispatchQueue @ react-dom_client.js?v=27039566:11772
(anonymous) @ react-dom_client.js?v=27039566:12182
batchedUpdates$1 @ react-dom_client.js?v=27039566:2628
dispatchEventForPluginEventSystem @ react-dom_client.js?v=27039566:11877
dispatchEvent @ react-dom_client.js?v=27039566:14792
dispatchDiscreteEvent @ react-dom_client.js?v=27039566:14773
<div>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=27039566:250
GameBoard @ GameBoard.tsx:430
react-stack-bottom-frame @ react-dom_client.js?v=27039566:17424
renderWithHooksAgain @ react-dom_client.js?v=27039566:4281
renderWithHooks @ react-dom_client.js?v=27039566:4217
updateFunctionComponent @ react-dom_client.js?v=27039566:6619
beginWork @ react-dom_client.js?v=27039566:7654
runWithFiberInDEV @ react-dom_client.js?v=27039566:1485
performUnitOfWork @ react-dom_client.js?v=27039566:10868
workLoopSync @ react-dom_client.js?v=27039566:10728
renderRootSync @ react-dom_client.js?v=27039566:10711
performWorkOnRoot @ react-dom_client.js?v=27039566:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=27039566:11623
performWorkUntilDeadline @ react-dom_client.js?v=27039566:36
<GameBoard>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=27039566:250
App @ App.tsx:121
react-stack-bottom-frame @ react-dom_client.js?v=27039566:17424
renderWithHooksAgain @ react-dom_client.js?v=27039566:4281
renderWithHooks @ react-dom_client.js?v=27039566:4217
updateFunctionComponent @ react-dom_client.js?v=27039566:6619
beginWork @ react-dom_client.js?v=27039566:7654
runWithFiberInDEV @ react-dom_client.js?v=27039566:1485
performUnitOfWork @ react-dom_client.js?v=27039566:10868
workLoopSync @ react-dom_client.js?v=27039566:10728
renderRootSync @ react-dom_client.js?v=27039566:10711
performWorkOnRoot @ react-dom_client.js?v=27039566:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=27039566:11623
performWorkUntilDeadline @ react-dom_client.js?v=27039566:36Understand this error
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
socket.ts:92 Switching to Player 1
socket.ts:33 🔄 Switched from player2 to player1
socket.ts:103 🎮 Player switcher UI updated
GameContext.tsx:181 GameContext: Switched to player1
GameBoard.tsx:54 GameBoard: Player switched to player1
GameBoard.tsx:61 Rejoining as Player 1 (without leaving)
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(12), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(12), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:98 GameBoard unmounting for player2
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-completed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-completed
GameBoard.tsx:85 [player1] Joining room QUICK as Player 1
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(12), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-state-update
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-drawn
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-revealed
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-ended
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: penalty-card
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-peek-result
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-preview
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: king-power-reveal
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-completed
GameBoard.tsx:98 GameBoard unmounting for player1
GameBoard.tsx:85 [player1] Joining room QUICK as Player 1
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(12), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(12), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
socket.ts:98 Switching to Player 2
socket.ts:33 🔄 Switched from player1 to player2
socket.ts:103 🎮 Player switcher UI updated
GameContext.tsx:181 GameContext: Switched to player2
GameBoard.tsx:54 GameBoard: Player switched to player2
GameBoard.tsx:61 Rejoining as Player 2 (without leaving)
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(12), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(12), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:98 GameBoard unmounting for player1
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-completed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-completed
GameBoard.tsx:85 [player2] Joining room QUICK as Player 2
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(12), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: game-state-update
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: card-drawn
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: card-revealed
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: game-ended
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: penalty-card
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-peek-result
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-swap-preview
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: king-power-reveal
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-swap-completed
GameBoard.tsx:98 GameBoard unmounting for player2
GameBoard.tsx:85 [player2] Joining room QUICK as Player 2
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(12), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(12), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
socket.ts:92 Switching to Player 1
socket.ts:33 🔄 Switched from player2 to player1
socket.ts:103 🎮 Player switcher UI updated
GameContext.tsx:181 GameContext: Switched to player1
GameBoard.tsx:54 GameBoard: Player switched to player1
GameBoard.tsx:61 Rejoining as Player 1 (without leaving)
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(12), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(12), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:98 GameBoard unmounting for player2
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-completed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-completed
GameBoard.tsx:85 [player1] Joining room QUICK as Player 1
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(12), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-state-update
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-drawn
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-revealed
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-ended
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: penalty-card
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-peek-result
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-preview
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: king-power-reveal
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-completed
GameBoard.tsx:98 GameBoard unmounting for player1
GameBoard.tsx:85 [player1] Joining room QUICK as Player 1
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(12), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(12), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:630 [player1] Eliminating card: 48
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: eliminate-card {roomId: 'QUICK', playerId: 'player1', cardId: '48'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: eliminate-card {roomId: 'QUICK', playerId: 'player1', cardId: '48'}
DualPlayerMockSocket.ts:579 ✅ Player 1 eliminated 10 from Player 1 at position 3
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(13), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(13), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
socket.ts:98 Switching to Player 2
socket.ts:33 🔄 Switched from player1 to player2
socket.ts:103 🎮 Player switcher UI updated
GameContext.tsx:181 GameContext: Switched to player2
GameBoard.tsx:54 GameBoard: Player switched to player2
GameBoard.tsx:61 Rejoining as Player 2 (without leaving)
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(13), gameStatus: 'playing', …}currentPlayerIndex: 1deck: (31) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}]0: {id: '23', suit: 'diamonds', rank: 'J', value: 11, isRevealed: false}1: {id: '10', suit: 'hearts', rank: 'J', value: 11, isRevealed: false}2: {id: '27', suit: 'clubs', rank: '2', value: 2, isRevealed: false}3: {id: '0', suit: 'hearts', rank: 'A', value: 1, isRevealed: false}4: {id: '18', suit: 'diamonds', rank: '6', value: 6, isRevealed: false}5: {id: '12', suit: 'hearts', rank: 'K', value: 0, isRevealed: false}6: {id: '21', suit: 'diamonds', rank: '9', value: 9, isRevealed: false}7: {id: '9', suit: 'hearts', rank: '10', value: 10, isRevealed: false}8: {id: '29', suit: 'clubs', rank: '4', value: 4, isRevealed: false}9: {id: '4', suit: 'hearts', rank: '5', value: 5, isRevealed: false}10: {id: '6', suit: 'hearts', rank: '7', value: 7, isRevealed: false}11: {id: '7', suit: 'hearts', rank: '8', value: 8, isRevealed: false}12: {id: '46', suit: 'spades', rank: '8', value: 8, isRevealed: false}13: {id: '34', suit: 'clubs', rank: '9', value: 9, isRevealed: false}14: {id: '36', suit: 'clubs', rank: 'J', value: 11, isRevealed: false}15: {id: '30', suit: 'clubs', rank: '5', value: 5, isRevealed: false}16: {id: '39', suit: 'spades', rank: 'A', value: 1, isRevealed: false}17: {id: '51', suit: 'spades', rank: 'K', value: 13, isRevealed: false}18: {id: '17', suit: 'diamonds', rank: '5', value: 5, isRevealed: false}19: {id: '43', suit: 'spades', rank: '5', value: 5, isRevealed: false}20: {id: '16', suit: 'diamonds', rank: '4', value: 4, isRevealed: false}21: {id: '25', suit: 'diamonds', rank: 'K', value: 0, isRevealed: false}22: {id: '33', suit: 'clubs', rank: '8', value: 8, isRevealed: false}23: {id: '19', suit: 'diamonds', rank: '7', value: 7, isRevealed: false}24: {id: '50', suit: 'spades', rank: 'Q', value: 12, isRevealed: false}25: {id: '35', suit: 'clubs', rank: '10', value: 10, isRevealed: false}26: {id: '13', suit: 'diamonds', rank: 'A', value: 1, isRevealed: false}27: {id: '31', suit: 'clubs', rank: '6', value: 6, isRevealed: false}28: {id: '44', suit: 'spades', rank: '6', value: 6, isRevealed: false}29: {id: '41', suit: 'spades', rank: '3', value: 3, isRevealed: false}30: {id: '47', suit: 'spades', rank: '9', value: 9, isRevealed: false}length: 31[[Prototype]]: Array(0)declarer: "player2"discardPile: (17) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}]0: {id: '15', suit: 'diamonds', rank: '3', value: 3, isRevealed: true}1: {id: '2', suit: 'hearts', rank: '3', value: 3, isRevealed: false, …}2: {id: '24', suit: 'diamonds', rank: 'Q', value: 12, isRevealed: true}3: {id: '11', suit: 'hearts', rank: 'Q', value: 12, isRevealed: false, …}4: {id: '1', suit: 'hearts', rank: '2', value: 2, isRevealed: true}5: {id: '14', suit: 'diamonds', rank: '2', value: 2, isRevealed: false, …}6: {id: '38', suit: 'clubs', rank: 'K', value: 13, isRevealed: true}7: {id: '49', suit: 'spades', rank: 'J', value: 11, isRevealed: true}8: {id: '5', suit: 'hearts', rank: '6', value: 6, isRevealed: false, …}9: {id: '37', suit: 'clubs', rank: 'Q', value: 12, isRevealed: true}10: {id: '45', suit: 'spades', rank: '7', value: 7, isRevealed: false, …}11: {id: '22', suit: 'diamonds', rank: '10', value: 10, isRevealed: true}12: {id: '48', suit: 'spades', rank: '10', value: 10, isRevealed: false, …}13: {id: '42', suit: 'spades', rank: '4', value: 4, isRevealed: false, …}14: {id: '3', suit: 'hearts', rank: '4', value: 4, isRevealed: false}15: {id: '8', suit: 'hearts', rank: '9', value: 9, isRevealed: true}16: {id: '20', suit: 'diamonds', rank: '8', value: 8, isRevealed: true}length: 17[[Prototype]]: Array(0)gameStatus: "ended"lastAction: {type: 'declare', playerId: 'player2', timestamp: 1750192224638}matchingDiscardCard: nullmatchingDiscardTimeout: nullmatchingDiscardWindow: falseplayers: (2) [{…}, {…}]roundNumber: 1type: "view"[[Prototype]]: Object
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(13), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:98 GameBoard unmounting for player1
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-completed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-completed
GameBoard.tsx:85 [player2] Joining room QUICK as Player 2
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(13), gameStatus: 'playing', …}currentPlayerIndex: 1deck: (31) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}]declarer: "player2"discardPile: (17) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}]gameStatus: "ended"lastAction: {type: 'declare', playerId: 'player2', timestamp: 1750192224638}matchingDiscardCard: nullmatchingDiscardTimeout: nullmatchingDiscardWindow: falseplayers: (2) [{…}, {…}]roundNumber: 1type: "view"[[Prototype]]: Object
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: game-state-update
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: card-drawn
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: card-revealed
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: game-ended
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: penalty-card
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-peek-result
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-swap-preview
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: king-power-reveal
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-swap-completed
GameBoard.tsx:98 GameBoard unmounting for player2
GameBoard.tsx:85 [player2] Joining room QUICK as Player 2
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(13), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(13), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
socket.ts:92 Switching to Player 1
socket.ts:33 🔄 Switched from player2 to player1
socket.ts:103 🎮 Player switcher UI updated
GameContext.tsx:181 GameContext: Switched to player1
GameBoard.tsx:54 GameBoard: Player switched to player1
GameBoard.tsx:61 Rejoining as Player 1 (without leaving)
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(13), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(13), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:98 GameBoard unmounting for player2
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-completed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-completed
GameBoard.tsx:85 [player1] Joining room QUICK as Player 1
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(13), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-state-update
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-drawn
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-revealed
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-ended
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: penalty-card
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-peek-result
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-preview
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: king-power-reveal
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-completed
GameBoard.tsx:98 GameBoard unmounting for player1
GameBoard.tsx:85 [player1] Joining room QUICK as Player 1
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(13), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(13), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
socket.ts:98 Switching to Player 2
socket.ts:33 🔄 Switched from player1 to player2
socket.ts:103 🎮 Player switcher UI updated
GameContext.tsx:181 GameContext: Switched to player2
GameBoard.tsx:54 GameBoard: Player switched to player2
GameBoard.tsx:61 Rejoining as Player 2 (without leaving)
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(13), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(13), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:98 GameBoard unmounting for player1
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-completed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-completed
GameBoard.tsx:85 [player2] Joining room QUICK as Player 2
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(13), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: game-state-update
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: card-drawn
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: card-revealed
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: game-ended
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: penalty-card
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-peek-result
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-swap-preview
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: king-power-reveal
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-swap-completed
GameBoard.tsx:98 GameBoard unmounting for player2
GameBoard.tsx:85 [player2] Joining room QUICK as Player 2
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(13), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(34), discardPile: Array(13), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:551 [player2] Drawing card...
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: draw-card {roomId: 'QUICK', playerId: 'player2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: draw-card {roomId: 'QUICK', playerId: 'player2'}
DualPlayerMockSocket.ts:370 🎴 Player 2 drew: 4 of hearts
DualPlayerMockSocket.ts:52 📡 Broadcasting card-drawn to player2 {id: '3', suit: 'hearts', rank: '4', value: 4, isRevealed: true}
GameContext.tsx:302 [player2] Card drawn event received: {id: '3', suit: 'hearts', rank: '4', value: 4, isRevealed: true}
GameContext.tsx:328 Setting drawn card (legacy format): {id: '3', suit: 'hearts', rank: '4', value: 4, isRevealed: true}
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(33), discardPile: Array(13), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(33), discardPile: Array(13), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:685 [player2] Swapping drawn card with selected card: {id: '42', suit: 'spades', rank: '4', value: 4, isRevealed: false, …}
GameContext.tsx:563 [player2] Swapping drawn card with hand card: 42
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: swap-drawn-card {roomId: 'QUICK', playerId: 'player2', drawnCardId: '3', handCardId: '42'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: swap-drawn-card {roomId: 'QUICK', playerId: 'player2', drawnCardId: '3', handCardId: '42'}
DualPlayerMockSocket.ts:493 🔄 Player 2 swapped: 4 → hand, 4 → discard
DualPlayerMockSocket.ts:64 🔄 [TURN] Current: Player 2 (index 1)
DualPlayerMockSocket.ts:86 ✅ [TURN] Next: Player 1 (index 0)
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(33), discardPile: Array(14), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(33), discardPile: Array(14), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
socket.ts:92 Switching to Player 1
socket.ts:33 🔄 Switched from player2 to player1
socket.ts:103 🎮 Player switcher UI updated
GameContext.tsx:181 GameContext: Switched to player1
GameBoard.tsx:54 GameBoard: Player switched to player1
GameBoard.tsx:61 Rejoining as Player 1 (without leaving)
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(33), discardPile: Array(14), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(33), discardPile: Array(14), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:98 GameBoard unmounting for player2
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-completed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-completed
GameBoard.tsx:85 [player1] Joining room QUICK as Player 1
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(33), discardPile: Array(14), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-state-update
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-drawn
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-revealed
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-ended
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: penalty-card
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-peek-result
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-preview
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: king-power-reveal
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-completed
GameBoard.tsx:98 GameBoard unmounting for player1
GameBoard.tsx:85 [player1] Joining room QUICK as Player 1
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(33), discardPile: Array(14), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(33), discardPile: Array(14), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:630 [player1] Eliminating card: 3
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: eliminate-card {roomId: 'QUICK', playerId: 'player1', cardId: '3'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: eliminate-card {roomId: 'QUICK', playerId: 'player1', cardId: '3'}
DualPlayerMockSocket.ts:579 ✅ Player 1 eliminated 4 from Player 2 at position 0
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(33), discardPile: Array(15), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(33), discardPile: Array(15), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:551 [player1] Drawing card...
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: draw-card {roomId: 'QUICK', playerId: 'player1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: draw-card {roomId: 'QUICK', playerId: 'player1'}
DualPlayerMockSocket.ts:370 🎴 Player 1 drew: 9 of hearts
DualPlayerMockSocket.ts:52 📡 Broadcasting card-drawn to player1 {id: '8', suit: 'hearts', rank: '9', value: 9, isRevealed: true}
GameContext.tsx:302 [player1] Card drawn event received: {id: '8', suit: 'hearts', rank: '9', value: 9, isRevealed: true}
GameContext.tsx:328 Setting drawn card (legacy format): {id: '8', suit: 'hearts', rank: '9', value: 9, isRevealed: true}
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(32), discardPile: Array(15), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(32), discardPile: Array(15), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:593 [player1] Discarding drawn card...
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: discard-drawn-card {roomId: 'QUICK', playerId: 'player1', cardId: '8'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: discard-drawn-card {roomId: 'QUICK', playerId: 'player1', cardId: '8'}
DualPlayerMockSocket.ts:403 ♻️ Player 1 discarded: 9 of hearts
DualPlayerMockSocket.ts:426 ⚡ 9 power activated for Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(32), discardPile: Array(16), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(32), discardPile: Array(16), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:593 [player1] Discarding drawn card...
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: discard-drawn-card {roomId: 'QUICK', playerId: 'player1', cardId: '8'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: discard-drawn-card {roomId: 'QUICK', playerId: 'player1', cardId: '8'}
DualPlayerMockSocket.ts:398 ❌ No drawn card found for player1
handleDiscardDrawnCard @ DualPlayerMockSocket.ts:398
handleClientEvents @ DualPlayerMockSocket.ts:162
emit @ DualPlayerMockSocket.ts:121
emit @ socket.ts:13
handleDiscardDrawnCard @ GameContext.tsx:598
executeDispatch @ react-dom_client.js?v=27039566:11736
runWithFiberInDEV @ react-dom_client.js?v=27039566:1485
processDispatchQueue @ react-dom_client.js?v=27039566:11772
(anonymous) @ react-dom_client.js?v=27039566:12182
batchedUpdates$1 @ react-dom_client.js?v=27039566:2628
dispatchEventForPluginEventSystem @ react-dom_client.js?v=27039566:11877
dispatchEvent @ react-dom_client.js?v=27039566:14792
dispatchDiscreteEvent @ react-dom_client.js?v=27039566:14773
<div>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=27039566:250
GameBoard @ GameBoard.tsx:430
react-stack-bottom-frame @ react-dom_client.js?v=27039566:17424
renderWithHooksAgain @ react-dom_client.js?v=27039566:4281
renderWithHooks @ react-dom_client.js?v=27039566:4217
updateFunctionComponent @ react-dom_client.js?v=27039566:6619
beginWork @ react-dom_client.js?v=27039566:7654
runWithFiberInDEV @ react-dom_client.js?v=27039566:1485
performUnitOfWork @ react-dom_client.js?v=27039566:10868
workLoopSync @ react-dom_client.js?v=27039566:10728
renderRootSync @ react-dom_client.js?v=27039566:10711
performWorkOnRoot @ react-dom_client.js?v=27039566:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=27039566:11623
performWorkUntilDeadline @ react-dom_client.js?v=27039566:36
<GameBoard>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=27039566:250
App @ App.tsx:121
react-stack-bottom-frame @ react-dom_client.js?v=27039566:17424
renderWithHooksAgain @ react-dom_client.js?v=27039566:4281
renderWithHooks @ react-dom_client.js?v=27039566:4217
updateFunctionComponent @ react-dom_client.js?v=27039566:6619
beginWork @ react-dom_client.js?v=27039566:7654
runWithFiberInDEV @ react-dom_client.js?v=27039566:1485
performUnitOfWork @ react-dom_client.js?v=27039566:10868
workLoopSync @ react-dom_client.js?v=27039566:10728
renderRootSync @ react-dom_client.js?v=27039566:10711
performWorkOnRoot @ react-dom_client.js?v=27039566:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=27039566:11623
performWorkUntilDeadline @ react-dom_client.js?v=27039566:36Understand this error
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:732 [player1] Using 9 power on opponent card
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: use-power-on-opponent-card {roomId: 'QUICK', playerId: 'player1', targetPlayerId: 'player2', cardIndex: 3}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: use-power-on-opponent-card {roomId: 'QUICK', playerId: 'player1', targetPlayerId: 'player2', cardIndex: 3}
DualPlayerMockSocket.ts:52 📡 Broadcasting power-peek-result to player1 {card: {…}, targetPlayer: 'Player 2', targetPlayerId: 'player2', cardIndex: 3}
GameContext.tsx:383 [player1] Power peek result: A of clubs from Player 2
GameContext.tsx:392 Revealed opponent card: A of clubs at position 3
DualPlayerMockSocket.ts:715 👁️ Player 1 peeked at Player 2's A with 9 power
DualPlayerMockSocket.ts:64 🔄 [TURN] Current: Player 1 (index 0)
DualPlayerMockSocket.ts:86 ✅ [TURN] Next: Player 2 (index 1)
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(32), discardPile: Array(16), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(32), discardPile: Array(16), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
socket.ts:98 Switching to Player 2
socket.ts:33 🔄 Switched from player1 to player2
socket.ts:103 🎮 Player switcher UI updated
GameContext.tsx:181 GameContext: Switched to player2
GameBoard.tsx:54 GameBoard: Player switched to player2
GameBoard.tsx:61 Rejoining as Player 2 (without leaving)
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(32), discardPile: Array(16), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(32), discardPile: Array(16), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:98 GameBoard unmounting for player1
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-completed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-completed
GameBoard.tsx:85 [player2] Joining room QUICK as Player 2
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(32), discardPile: Array(16), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: game-state-update
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: card-drawn
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: card-revealed
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: game-ended
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: penalty-card
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-peek-result
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-swap-preview
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: king-power-reveal
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-swap-completed
GameBoard.tsx:98 GameBoard unmounting for player2
GameBoard.tsx:85 [player2] Joining room QUICK as Player 2
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(32), discardPile: Array(16), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(32), discardPile: Array(16), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:732 [player2] Using 10 power on opponent card
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: use-power-on-opponent-card {roomId: 'QUICK', playerId: 'player2', targetPlayerId: 'player1', cardIndex: 2}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: use-power-on-opponent-card {roomId: 'QUICK', playerId: 'player2', targetPlayerId: 'player1', cardIndex: 2}
DualPlayerMockSocket.ts:52 📡 Broadcasting power-peek-result to player2 {card: {…}, targetPlayer: 'Player 1', targetPlayerId: 'player1', cardIndex: 2}
GameContext.tsx:383 [player2] Power peek result: 7 of clubs from Player 1
GameContext.tsx:392 Revealed opponent card: 7 of clubs at position 2
DualPlayerMockSocket.ts:715 👁️ Player 2 peeked at Player 1's 7 with 10 power
DualPlayerMockSocket.ts:64 🔄 [TURN] Current: Player 2 (index 1)
DualPlayerMockSocket.ts:86 ✅ [TURN] Next: Player 1 (index 0)
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(32), discardPile: Array(16), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(32), discardPile: Array(16), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
socket.ts:92 Switching to Player 1
socket.ts:33 🔄 Switched from player2 to player1
socket.ts:103 🎮 Player switcher UI updated
GameContext.tsx:181 GameContext: Switched to player1
GameBoard.tsx:54 GameBoard: Player switched to player1
GameBoard.tsx:61 Rejoining as Player 1 (without leaving)
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(32), discardPile: Array(16), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(32), discardPile: Array(16), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:98 GameBoard unmounting for player2
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-completed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-completed
GameBoard.tsx:85 [player1] Joining room QUICK as Player 1
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(32), discardPile: Array(16), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-state-update
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-drawn
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: card-revealed
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: game-ended
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: penalty-card
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-peek-result
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-preview
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: king-power-reveal
DualPlayerMockSocket.ts:134 👂 [player1] Listening for: power-swap-completed
GameBoard.tsx:98 GameBoard unmounting for player1
GameBoard.tsx:85 [player1] Joining room QUICK as Player 1
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: join-room {roomId: 'QUICK', playerName: 'Player 1'}
DualPlayerMockSocket.ts:193 🚪 [player1] Joining room: QUICK as Player 1
DualPlayerMockSocket.ts:219 🔄 Player player1 already in room, updating name to Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 1', id: 'player1'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(32), discardPile: Array(16), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(32), discardPile: Array(16), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:551 [player1] Drawing card...
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: draw-card {roomId: 'QUICK', playerId: 'player1'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: draw-card {roomId: 'QUICK', playerId: 'player1'}
DualPlayerMockSocket.ts:370 🎴 Player 1 drew: 8 of diamonds
DualPlayerMockSocket.ts:52 📡 Broadcasting card-drawn to player1 {id: '20', suit: 'diamonds', rank: '8', value: 8, isRevealed: true}
GameContext.tsx:302 [player1] Card drawn event received: {id: '20', suit: 'diamonds', rank: '8', value: 8, isRevealed: true}
GameContext.tsx:328 Setting drawn card (legacy format): {id: '20', suit: 'diamonds', rank: '8', value: 8, isRevealed: true}
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(31), discardPile: Array(16), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(31), discardPile: Array(16), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:593 [player1] Discarding drawn card...
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: discard-drawn-card {roomId: 'QUICK', playerId: 'player1', cardId: '20'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: discard-drawn-card {roomId: 'QUICK', playerId: 'player1', cardId: '20'}
DualPlayerMockSocket.ts:403 ♻️ Player 1 discarded: 8 of diamonds
DualPlayerMockSocket.ts:426 ⚡ 8 power activated for Player 1
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 0, deck: Array(31), discardPile: Array(17), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 0, deck: Array(31), discardPile: Array(17), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:593 [player1] Discarding drawn card...
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: discard-drawn-card {roomId: 'QUICK', playerId: 'player1', cardId: '20'}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: discard-drawn-card {roomId: 'QUICK', playerId: 'player1', cardId: '20'}
DualPlayerMockSocket.ts:398 ❌ No drawn card found for player1
handleDiscardDrawnCard @ DualPlayerMockSocket.ts:398
handleClientEvents @ DualPlayerMockSocket.ts:162
emit @ DualPlayerMockSocket.ts:121
emit @ socket.ts:13
handleDiscardDrawnCard @ GameContext.tsx:598
executeDispatch @ react-dom_client.js?v=27039566:11736
runWithFiberInDEV @ react-dom_client.js?v=27039566:1485
processDispatchQueue @ react-dom_client.js?v=27039566:11772
(anonymous) @ react-dom_client.js?v=27039566:12182
batchedUpdates$1 @ react-dom_client.js?v=27039566:2628
dispatchEventForPluginEventSystem @ react-dom_client.js?v=27039566:11877
dispatchEvent @ react-dom_client.js?v=27039566:14792
dispatchDiscreteEvent @ react-dom_client.js?v=27039566:14773
<div>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=27039566:250
GameBoard @ GameBoard.tsx:430
react-stack-bottom-frame @ react-dom_client.js?v=27039566:17424
renderWithHooksAgain @ react-dom_client.js?v=27039566:4281
renderWithHooks @ react-dom_client.js?v=27039566:4217
updateFunctionComponent @ react-dom_client.js?v=27039566:6619
beginWork @ react-dom_client.js?v=27039566:7654
runWithFiberInDEV @ react-dom_client.js?v=27039566:1485
performUnitOfWork @ react-dom_client.js?v=27039566:10868
workLoopSync @ react-dom_client.js?v=27039566:10728
renderRootSync @ react-dom_client.js?v=27039566:10711
performWorkOnRoot @ react-dom_client.js?v=27039566:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=27039566:11623
performWorkUntilDeadline @ react-dom_client.js?v=27039566:36
<GameBoard>
exports.jsxDEV @ react_jsx-dev-runtime.js?v=27039566:250
App @ App.tsx:121
react-stack-bottom-frame @ react-dom_client.js?v=27039566:17424
renderWithHooksAgain @ react-dom_client.js?v=27039566:4281
renderWithHooks @ react-dom_client.js?v=27039566:4217
updateFunctionComponent @ react-dom_client.js?v=27039566:6619
beginWork @ react-dom_client.js?v=27039566:7654
runWithFiberInDEV @ react-dom_client.js?v=27039566:1485
performUnitOfWork @ react-dom_client.js?v=27039566:10868
workLoopSync @ react-dom_client.js?v=27039566:10728
renderRootSync @ react-dom_client.js?v=27039566:10711
performWorkOnRoot @ react-dom_client.js?v=27039566:10330
performWorkOnRootViaSchedulerTask @ react-dom_client.js?v=27039566:11623
performWorkUntilDeadline @ react-dom_client.js?v=27039566:36Understand this error
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:719 [player1] Using 8 power on own card
DualPlayerMockSocket.ts:106 📤 [player1] Emitting: use-power-on-own-card {roomId: 'QUICK', playerId: 'player1', cardIndex: 2}
DualPlayerMockSocket.ts:144 ⚡ [player1] Handling: use-power-on-own-card {roomId: 'QUICK', playerId: 'player1', cardIndex: 2}
DualPlayerMockSocket.ts:52 📡 Broadcasting power-peek-result to player1 {card: {…}, targetPlayer: 'Player 1 (You)', cardIndex: 2}
GameContext.tsx:383 [player1] Power peek result: 7 of clubs from Player 1 (You)
DualPlayerMockSocket.ts:659 👁️ Player 1 peeked at own 7 with 8 power
DualPlayerMockSocket.ts:64 🔄 [TURN] Current: Player 1 (index 0)
DualPlayerMockSocket.ts:86 ✅ [TURN] Next: Player 2 (index 1)
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(31), discardPile: Array(17), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(31), discardPile: Array(17), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:698 [player1] Selecting card: {id: '40', suit: 'spades', rank: '2', value: 2, isRevealed: false}
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:698 [player1] Selecting card: {id: '28', suit: 'clubs', rank: '3', value: 3, isRevealed: false}
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player1, Is host: true
GameBoard.tsx:137 All players: (2) [{…}, {…}]
socket.ts:98 Switching to Player 2
socket.ts:33 🔄 Switched from player1 to player2
socket.ts:103 🎮 Player switcher UI updated
GameContext.tsx:181 GameContext: Switched to player2
GameBoard.tsx:54 GameBoard: Player switched to player2
GameBoard.tsx:61 Rejoining as Player 2 (without leaving)
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(31), discardPile: Array(17), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
GameContext.tsx:268 [player1] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(31), discardPile: Array(17), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player2
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:98 GameBoard unmounting for player1
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-state-update
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-drawn
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: card-revealed
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: game-ended
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: penalty-card
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-peek-result
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-preview
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: king-power-reveal
DualPlayerMockSocket.ts:139 🔇 [player1] Removing listener for: power-swap-completed
DualPlayerMockSocket.ts:139 🔇 [player2] Removing listener for: power-swap-completed
GameBoard.tsx:85 [player2] Joining room QUICK as Player 2
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(31), discardPile: Array(17), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: game-state-update
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: card-drawn
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: card-revealed
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: game-ended
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: penalty-card
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-peek-result
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-swap-preview
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: king-power-reveal
DualPlayerMockSocket.ts:134 👂 [player2] Listening for: power-swap-completed
GameBoard.tsx:98 GameBoard unmounting for player2
GameBoard.tsx:85 [player2] Joining room QUICK as Player 2
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: join-room {roomId: 'QUICK', playerName: 'Player 2'}
DualPlayerMockSocket.ts:193 🚪 [player2] Joining room: QUICK as Player 2
DualPlayerMockSocket.ts:219 🔄 Player player2 already in room, updating name to Player 2
DualPlayerMockSocket.ts:39 📡 Broadcasting player-joined to all players {roomId: 'QUICK', name: 'Player 2', id: 'player2'}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(31), discardPile: Array(17), gameStatus: 'playing', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(31), discardPile: Array(17), gameStatus: 'playing', …}
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameContext.tsx:658 [player2] Confirming declare with ranks: ['A']
DualPlayerMockSocket.ts:106 📤 [player2] Emitting: declare {roomId: 'QUICK', playerId: 'player2', declaredRanks: Array(1)}
DualPlayerMockSocket.ts:144 ⚡ [player2] Handling: declare {roomId: 'QUICK', playerId: 'player2', declaredRanks: Array(1)}
DualPlayerMockSocket.ts:917 🎯 Player 2 declared:
DualPlayerMockSocket.ts:918    Hand structure: [ELIMINATED, ELIMINATED, ELIMINATED, A]
DualPlayerMockSocket.ts:923    Actual cards: 1 (A)
DualPlayerMockSocket.ts:926    Declared: [A]
DualPlayerMockSocket.ts:927    Expected: [A]
DualPlayerMockSocket.ts:934    Valid: ✅
DualPlayerMockSocket.ts:967 🏆 Game ended!
DualPlayerMockSocket.ts:968    Final scores: Player 1: 12, Player 2: 1
DualPlayerMockSocket.ts:973    Winners: Player 2 (1 points)
DualPlayerMockSocket.ts:983    Player 1: 3 cards (2=2, 3=3, 7=7) + 1 eliminated = 12 total
DualPlayerMockSocket.ts:983    Player 2: 1 cards (A=1) + 3 eliminated = 1 total
DualPlayerMockSocket.ts:39 📡 Broadcasting game-state-update to all players {players: Array(2), currentPlayerIndex: 1, deck: Array(31), discardPile: Array(17), gameStatus: 'ended', …}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:268 [player2] Received game state update: {players: Array(2), currentPlayerIndex: 1, deck: Array(31), discardPile: Array(17), gameStatus: 'ended', …}
DualPlayerMockSocket.ts:39 📡 Broadcasting game-ended to all players {declarer: 'player2', winners: Array(1), isValidDeclaration: true, scoreBreakdown: Array(2)}
DualPlayerMockSocket.ts:41   → Sending to player1
DualPlayerMockSocket.ts:41   → Sending to player2
GameContext.tsx:359 [player2] Game ended: {declarer: 'player2', winners: Array(1), isValidDeclaration: true, scoreBreakdown: Array(2)}declarer: "player2"isValidDeclaration: truescoreBreakdown: Array(2)0: eliminatedCards: 1id: "player1"name: "Player 1"remainingCards: 3score: 12[[Prototype]]: Objectconstructor: ƒ Object()hasOwnProperty: ƒ hasOwnProperty()isPrototypeOf: ƒ isPrototypeOf()propertyIsEnumerable: ƒ propertyIsEnumerable()toLocaleString: ƒ toLocaleString()toString: ƒ toString()valueOf: ƒ valueOf()__defineGetter__: ƒ __defineGetter__()__defineSetter__: ƒ __defineSetter__()__lookupGetter__: ƒ __lookupGetter__()__lookupSetter__: ƒ __lookupSetter__()__proto__: (...)get __proto__: ƒ __proto__()set __proto__: ƒ __proto__()1: eliminatedCards: 3id: "player2"name: "Player 2"remainingCards: 1score: 1[[Prototype]]: Objectlength: 2[[Prototype]]: Array(0)winners: Array(1)0: id: "player2"name: "Player 2"score: 1[[Prototype]]: Objectlength: 1[[Prototype]]: Array(0)[[Prototype]]: Object
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]
GameBoard.tsx:134 Host check: Current socket ID: player2, Is host: false
GameBoard.tsx:137 All players: (2) [{…}, {…}]